// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.entity.Entity with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: EntityModel

EntityModel:
  {EntityModel} //instantiates the class
  (entityModelElements += EntityModelElement)* //EntityModel contains 0...* EntityModelElements
;

EntityModelElement:
  Entity | Enumeration
;

NamedElement:
  Entity | Feature | Enumeration | Literal
  name = STRING
;

Entity returns Entity: 
  'entity' name = ID ('extends' superType = [Entity])? '{' //?? name from NamedElement modeled, as the NamedElement instantiates an entity + has name from itself (NamedElement)??
   ('id' id = [Attribute|QualifiedName])(',' 
   features += Feature)*
   '}'
;



Attribute returns Attribute:
  'attribute' name = ID ('*')? ':' type = AttributeType (':' enumeration = [Enumeration|QualifiedName])? //TODO how to display '*' when mandatory --> can't be modeled? 
;

Relationship returns Relationship:
  'reference' name = ID ':' target = [Entity|QualifiedName]('[' lowerBound=INT '...' upperBound=INT ']') ('opposite-of' opposite = [Relationship|QualifiedName])?
;

enum AttributeType returns AttributeType:
  String = '1' | Integer = '2' | Text = '3' | Date = '4' | Time = '5' | Email = '6' | Boolean = '7' | Year = '8' | None = '0'
;

Feature:
  Attribute | Relationship
;

Enumeration returns Enumeration:
  'enum' name = ID '{'
    (literals += Literal)+ (',')
    '}'
;

Literal returns Literal:
  name = ID '=' '"' value = STRING '"'
;

EInt returns ecore::EInt:
  '-'? INT;

QualifiedName returns ecore::EString: 
  ID (=> '.'ID)*;