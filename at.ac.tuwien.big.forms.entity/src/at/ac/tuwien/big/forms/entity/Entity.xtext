// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.entity.Entity with org.eclipse.xtext.common.Terminals


import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: EntityModel

EntityModel returns EntityModel:
  {EntityModel} //instantiates the class
  (entityModelElements += EntityModelElement)* //EntityModel contains 0...* EntityModelElements
;

EntityModelElement returns EntityModelElement:
  Entity | Enumeration
;

/*
NamedElement returns NamedElement:
  Entity | Feature | Enumeration | Literal
  name = STRING
;*/


//TODO: NOTE THAT IT IS NOT A MISTAKE WHEN IT GIVES THE ERROR IN THE TESTFILE: "COULD NOT RESOLVE REFERENCE TO ATTRIBUTE TITLE". 
//ONLY HAPPENS WITH EXTENSION CLASSES WHERE TITLE REFERS TO THE TITLE OF ITS SUPER CLASS. SO TO FIX IT SHOULD ACTUALLY BE 
//PUBLICATION.TITLE IN THE TESTFILE. 
//THIS PROBLEM CAN ONLY BE FIXED USING SCOPING. LOOK AT THIS DISCUSSION THREAD FROM TUWEL:https://tuwel.tuwien.ac.at/mod/forum/discuss.php?d=53736

Entity returns Entity:
  'entity' name = ID ('extends' superType = [Entity] (',' superType = [Entity])*)? 
  '{'  
     'id' id=[Attribute|QualifiedName] ','
     (
     	(features += Feature',')*
     	(features+=Feature)	
     )     
  '}'
  
  ;
  

Attribute returns Attribute:
  'attribute' name = ID('*')? ':' type = AttributeType (':' enumeration = [Enumeration|QualifiedName])? //TODO how to display '*' when mandatory --> can't be modeled? 
;

Relationship returns Relationship:
  'reference' name = ID ':' target = [Entity|QualifiedName]'[' lowerBound=EInt'..'upperBound=EInt']' ('opposite-of' opposite = [Relationship|QualifiedName])?
;


enum AttributeType returns AttributeType:
  String = 'String' | Integer = 'Integer' | Text = 'Text' | Date = 'Date' | Time = 'Time' | Email = 'Email' | Boolean = 'Boolean' | Year = 'Year' | None = 'None'
;

Feature returns Feature:
  Attribute | Relationship
;

Enumeration returns Enumeration:
  'enum' name = ID '{'
     	
    (literals += Literal',')*
    (literals += Literal)	
    '}'
;

Literal returns Literal:
  name = ID '=' value = STRING 
;

EInt returns ecore::EInt:
  '-'? INT;
  

QualifiedName returns ecore::EString: 
  ID (=> '.'ID)*;