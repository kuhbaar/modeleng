// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.entity.Entity with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: EntityModel

EntityModel:
  {EntityModel} //instantiates the class
  (entityModelElements += EntityModelElement)* //EntityModel contains 0...* EntityModelElements
;

EntityModelElement:
	{Entity} | {Enumeration}
;

NamedElement:
  {Entity} | {Feature} | {Enumeration} | {Literal}
  name = STRING
;

Entity:
	'entity' name = ID ('extends' superType = [Entity])? '{' //TODO how to model name from NamedElement?!
	 ('id' id = [Attribute]) (',') //TODO colon correct?
	 (features += Feature)* (',')
	 '}'
;



Attribute:
	'attribute' name = ID ('*')? ':' type = AttributeType (':' enumeration = [Enumeration])? //TODO how to display '*' when mandatory, name from NamedElement
;

Relationship:
  'reference' name = ID ':' target = [Entity]('[' lowerBound=INT '...' upperBound=INT ']') ('opposite-of' opposite = [Relationship])?
;

enum AttributeType:
	String = '1' | Integer = '2' | Text = '3' | Date = '4' | Time = '5' | Email = '6' | Boolean = '7' | Year = '8' | None = '0'
;

Feature:
  name=STRING //TODO is that right?....
;

Enumeration:
  'enum' name = ID '{'
    (literals += Literal)+ (',')
    '}'
;

Literal:
	name = ID '=' '"' value = STRING '"'
;

EInt returns ecore::EInt:
	'-'? INT;

QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;