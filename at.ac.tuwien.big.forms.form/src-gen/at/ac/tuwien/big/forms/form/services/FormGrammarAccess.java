/*
* generated by Xtext
*/
package at.ac.tuwien.big.forms.form.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FormGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FormModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFormsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormsFormParserRuleCall_1_0 = (RuleCall)cFormsAssignment_1.eContents().get(0);
		
		//// implement your grammar here, starting with the root element: FormModel
		//FormModel:
		//	{FormModel} forms+=Form*;
		public ParserRule getRule() { return rule; }

		//{FormModel} forms+=Form*
		public Group getGroup() { return cGroup; }

		//{FormModel}
		public Action getFormModelAction_0() { return cFormModelAction_0; }

		//forms+=Form*
		public Assignment getFormsAssignment_1() { return cFormsAssignment_1; }

		//Form
		public RuleCall getFormsFormParserRuleCall_1_0() { return cFormsFormParserRuleCall_1_0; }
	}

	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWelcomeFormAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cWelcomeFormWelcomeKeyword_0_0 = (Keyword)cWelcomeFormAssignment_0.eContents().get(0);
		private final Keyword cFormKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTitleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTitleSTRINGTerminalRuleCall_4_0 = (RuleCall)cTitleAssignment_4.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHandlesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEntityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cEntityEntityCrossReference_7_0 = (CrossReference)cEntityAssignment_7.eContents().get(0);
		private final RuleCall cEntityEntityQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cEntityEntityCrossReference_7_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPagesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPagesPageParserRuleCall_9_0 = (RuleCall)cPagesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Form:
		//	welcomeForm?="welcome"? "form" name=ID "\"" title=STRING "\"" "handles" entity=[Entity|QualifiedName] "{"
		//	pages+=Page* //TODO: description missing?
		// "}";
		public ParserRule getRule() { return rule; }

		//welcomeForm?="welcome"? "form" name=ID "\"" title=STRING "\"" "handles" entity=[Entity|QualifiedName] "{" pages+=Page*
		////TODO: description missing?
		// "}"
		public Group getGroup() { return cGroup; }

		//welcomeForm?="welcome"?
		public Assignment getWelcomeFormAssignment_0() { return cWelcomeFormAssignment_0; }

		//"welcome"
		public Keyword getWelcomeFormWelcomeKeyword_0_0() { return cWelcomeFormWelcomeKeyword_0_0; }

		//"form"
		public Keyword getFormKeyword_1() { return cFormKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }

		//title=STRING
		public Assignment getTitleAssignment_4() { return cTitleAssignment_4; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_4_0() { return cTitleSTRINGTerminalRuleCall_4_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_5() { return cQuotationMarkKeyword_5; }

		//"handles"
		public Keyword getHandlesKeyword_6() { return cHandlesKeyword_6; }

		//entity=[Entity|QualifiedName]
		public Assignment getEntityAssignment_7() { return cEntityAssignment_7; }

		//[Entity|QualifiedName]
		public CrossReference getEntityEntityCrossReference_7_0() { return cEntityEntityCrossReference_7_0; }

		//QualifiedName
		public RuleCall getEntityEntityQualifiedNameParserRuleCall_7_0_1() { return cEntityEntityQualifiedNameParserRuleCall_7_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//pages+=Page*
		public Assignment getPagesAssignment_9() { return cPagesAssignment_9; }

		//Page
		public RuleCall getPagesPageParserRuleCall_9_0() { return cPagesPageParserRuleCall_9_0; }

		////TODO: description missing?
		// "}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPageElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPageElementsPageElementParserRuleCall_5_0_0 = (RuleCall)cPageElementsAssignment_5_0.eContents().get(0);
		private final Keyword cCommaKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConditionConditionParserRuleCall_7_0 = (RuleCall)cConditionAssignment_7.eContents().get(0);
		
		//Page:
		//	"page" "\"" title=STRING "\"" "{" (pageElements+=PageElement ","?)* "}" condition=Condition?;
		public ParserRule getRule() { return rule; }

		//"page" "\"" title=STRING "\"" "{" (pageElements+=PageElement ","?)* "}" condition=Condition?
		public Group getGroup() { return cGroup; }

		//"page"
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_1() { return cQuotationMarkKeyword_1; }

		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(pageElements+=PageElement ","?)*
		public Group getGroup_5() { return cGroup_5; }

		//pageElements+=PageElement
		public Assignment getPageElementsAssignment_5_0() { return cPageElementsAssignment_5_0; }

		//PageElement
		public RuleCall getPageElementsPageElementParserRuleCall_5_0_0() { return cPageElementsPageElementParserRuleCall_5_0_0; }

		//","?
		public Keyword getCommaKeyword_5_1() { return cCommaKeyword_5_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//condition=Condition?
		public Assignment getConditionAssignment_7() { return cConditionAssignment_7; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_0() { return cConditionConditionParserRuleCall_7_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cWithKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cAttributeValueConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cWithKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCompositeConditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Condition:
		//	"with" AttributeValueCondition | "with" CompositeCondition;
		public ParserRule getRule() { return rule; }

		//"with" AttributeValueCondition | "with" CompositeCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//"with" AttributeValueCondition
		public Group getGroup_0() { return cGroup_0; }

		//"with"
		public Keyword getWithKeyword_0_0() { return cWithKeyword_0_0; }

		//AttributeValueCondition
		public RuleCall getAttributeValueConditionParserRuleCall_0_1() { return cAttributeValueConditionParserRuleCall_0_1; }

		//"with" CompositeCondition
		public Group getGroup_1() { return cGroup_1; }

		//"with"
		public Keyword getWithKeyword_1_0() { return cWithKeyword_1_0; }

		//CompositeCondition
		public RuleCall getCompositeConditionParserRuleCall_1_1() { return cCompositeConditionParserRuleCall_1_1; }
	}

	public class CompositeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionIDIDTerminalRuleCall_1_0 = (RuleCall)cConditionIDAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////TODO: how to do this?
		// CompositeCondition:
		//	"composite-condition" conditionID=ID ":";
		public ParserRule getRule() { return rule; }

		//"composite-condition" conditionID=ID ":"
		public Group getGroup() { return cGroup; }

		//"composite-condition"
		public Keyword getCompositeConditionKeyword_0() { return cCompositeConditionKeyword_0; }

		//conditionID=ID
		public Assignment getConditionIDAssignment_1() { return cConditionIDAssignment_1; }

		//ID
		public RuleCall getConditionIDIDTerminalRuleCall_1_0() { return cConditionIDIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}

	public class AttributeValueConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValueCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionIDIDTerminalRuleCall_1_0 = (RuleCall)cConditionIDAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAttributeAttributeCrossReference_3_0 = (CrossReference)cAttributeAssignment_3.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cAttributeAttributeCrossReference_3_0.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeConditionTypeEnumRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		
		//AttributeValueCondition:
		//	"attribute-condition" conditionID=ID ":" attribute=[Attribute|QualifiedName] "==" value=STRING "?"
		//	type=ConditionType;
		public ParserRule getRule() { return rule; }

		//"attribute-condition" conditionID=ID ":" attribute=[Attribute|QualifiedName] "==" value=STRING "?" type=ConditionType
		public Group getGroup() { return cGroup; }

		//"attribute-condition"
		public Keyword getAttributeConditionKeyword_0() { return cAttributeConditionKeyword_0; }

		//conditionID=ID
		public Assignment getConditionIDAssignment_1() { return cConditionIDAssignment_1; }

		//ID
		public RuleCall getConditionIDIDTerminalRuleCall_1_0() { return cConditionIDIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_3_0() { return cAttributeAttributeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_3_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_3_0_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//value=STRING
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_0() { return cValueSTRINGTerminalRuleCall_5_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_6() { return cQuestionMarkKeyword_6; }

		//type=ConditionType
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//ConditionType
		public RuleCall getTypeConditionTypeEnumRuleCall_7_0() { return cTypeConditionTypeEnumRuleCall_7_0; }
	}

	public class PageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributePageElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipPageElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PageElement:
		//	AttributePageElement | RelationshipPageElement;
		public ParserRule getRule() { return rule; }

		//AttributePageElement | RelationshipPageElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributePageElement
		public RuleCall getAttributePageElementParserRuleCall_0() { return cAttributePageElementParserRuleCall_0; }

		//RelationshipPageElement
		public RuleCall getRelationshipPageElementParserRuleCall_1() { return cRelationshipPageElementParserRuleCall_1; }
	}

	public class RelationshipPageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipPageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RelationshipPageElement:
		//	List | Table;
		public ParserRule getRule() { return rule; }

		//List | Table
		public Alternatives getAlternatives() { return cAlternatives; }

		//List
		public RuleCall getListParserRuleCall_0() { return cListParserRuleCall_0; }

		//Table
		public RuleCall getTableParserRuleCall_1() { return cTableParserRuleCall_1; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRelationshipAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRelationshipRelationshipCrossReference_6_0 = (CrossReference)cRelationshipAssignment_6.eContents().get(0);
		private final RuleCall cRelationshipRelationshipQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cRelationshipRelationshipCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cColumnsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_8_0_0 = (RuleCall)cColumnsAssignment_8_0.eContents().get(0);
		private final Keyword cCommaKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEditsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cEditingFormAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cEditingFormFormCrossReference_11_0 = (CrossReference)cEditingFormAssignment_11.eContents().get(0);
		private final RuleCall cEditingFormFormQualifiedNameParserRuleCall_11_0_1 = (RuleCall)cEditingFormFormCrossReference_11_0.eContents().get(1);
		
		//Table:
		//	"table" elementID=ID "\"" label=STRING "\"" "handles" relationship=[Relationship|QualifiedName] "{" (columns+=Column
		//	",")* "}" "edits" editingForm=[Form|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"table" elementID=ID "\"" label=STRING "\"" "handles" relationship=[Relationship|QualifiedName] "{" (columns+=Column
		//",")* "}" "edits" editingForm=[Form|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//relationship=[Relationship|QualifiedName]
		public Assignment getRelationshipAssignment_6() { return cRelationshipAssignment_6; }

		//[Relationship|QualifiedName]
		public CrossReference getRelationshipRelationshipCrossReference_6_0() { return cRelationshipRelationshipCrossReference_6_0; }

		//QualifiedName
		public RuleCall getRelationshipRelationshipQualifiedNameParserRuleCall_6_0_1() { return cRelationshipRelationshipQualifiedNameParserRuleCall_6_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//(columns+=Column ",")*
		public Group getGroup_8() { return cGroup_8; }

		//columns+=Column
		public Assignment getColumnsAssignment_8_0() { return cColumnsAssignment_8_0; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_8_0_0() { return cColumnsColumnParserRuleCall_8_0_0; }

		//","
		public Keyword getCommaKeyword_8_1() { return cCommaKeyword_8_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"edits"
		public Keyword getEditsKeyword_10() { return cEditsKeyword_10; }

		//editingForm=[Form|QualifiedName]
		public Assignment getEditingFormAssignment_11() { return cEditingFormAssignment_11; }

		//[Form|QualifiedName]
		public CrossReference getEditingFormFormCrossReference_11_0() { return cEditingFormFormCrossReference_11_0; }

		//QualifiedName
		public RuleCall getEditingFormFormQualifiedNameParserRuleCall_11_0_1() { return cEditingFormFormQualifiedNameParserRuleCall_11_0_1; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRelationshipAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRelationshipRelationshipCrossReference_6_0 = (CrossReference)cRelationshipAssignment_6.eContents().get(0);
		private final RuleCall cRelationshipRelationshipQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cRelationshipRelationshipCrossReference_6_0.eContents().get(1);
		private final Keyword cEditsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEditingFormAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cEditingFormFormCrossReference_8_0 = (CrossReference)cEditingFormAssignment_8.eContents().get(0);
		private final RuleCall cEditingFormFormQualifiedNameParserRuleCall_8_0_1 = (RuleCall)cEditingFormFormCrossReference_8_0.eContents().get(1);
		
		//List:
		//	"list" elementID=ID "\"" label=STRING "\"" "handles" relationship=[Relationship|QualifiedName] "edits"
		//	editingForm=[Form|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"list" elementID=ID "\"" label=STRING "\"" "handles" relationship=[Relationship|QualifiedName] "edits"
		//editingForm=[Form|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//relationship=[Relationship|QualifiedName]
		public Assignment getRelationshipAssignment_6() { return cRelationshipAssignment_6; }

		//[Relationship|QualifiedName]
		public CrossReference getRelationshipRelationshipCrossReference_6_0() { return cRelationshipRelationshipCrossReference_6_0; }

		//QualifiedName
		public RuleCall getRelationshipRelationshipQualifiedNameParserRuleCall_6_0_1() { return cRelationshipRelationshipQualifiedNameParserRuleCall_6_0_1; }

		//"edits"
		public Keyword getEditsKeyword_7() { return cEditsKeyword_7; }

		//editingForm=[Form|QualifiedName]
		public Assignment getEditingFormAssignment_8() { return cEditingFormAssignment_8; }

		//[Form|QualifiedName]
		public CrossReference getEditingFormFormCrossReference_8_0() { return cEditingFormFormCrossReference_8_0; }

		//QualifiedName
		public RuleCall getEditingFormFormQualifiedNameParserRuleCall_8_0_1() { return cEditingFormFormQualifiedNameParserRuleCall_8_0_1; }
	}

	public class AttributePageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributePageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextAreaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelectionFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cColumnParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateSelectionFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimeSelectionFieldParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AttributePageElement:
		//	TextField | TextArea | SelectionField | Column | DateSelectionField | TimeSelectionField;
		public ParserRule getRule() { return rule; }

		//TextField | TextArea | SelectionField | Column | DateSelectionField | TimeSelectionField
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextField
		public RuleCall getTextFieldParserRuleCall_0() { return cTextFieldParserRuleCall_0; }

		//TextArea
		public RuleCall getTextAreaParserRuleCall_1() { return cTextAreaParserRuleCall_1; }

		//SelectionField
		public RuleCall getSelectionFieldParserRuleCall_2() { return cSelectionFieldParserRuleCall_2; }

		//Column
		public RuleCall getColumnParserRuleCall_3() { return cColumnParserRuleCall_3; }

		//DateSelectionField
		public RuleCall getDateSelectionFieldParserRuleCall_4() { return cDateSelectionFieldParserRuleCall_4; }

		//TimeSelectionField
		public RuleCall getTimeSelectionFieldParserRuleCall_5() { return cTimeSelectionFieldParserRuleCall_5; }
	}

	public class TimeSelectionFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeSelectionField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeSelectionFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cAttributeAttributeCrossReference_6_0 = (CrossReference)cAttributeAssignment_6.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cAttributeAttributeCrossReference_6_0.eContents().get(1);
		
		//TimeSelectionField:
		//	"time-selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"time-selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"time-selection-field"
		public Keyword getTimeSelectionFieldKeyword_0() { return cTimeSelectionFieldKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_6() { return cAttributeAssignment_6; }

		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_6_0() { return cAttributeAttributeCrossReference_6_0; }

		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_6_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_6_0_1; }
	}

	public class DateSelectionFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateSelectionField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateSelectionFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cAttributeAttributeCrossReference_6_0 = (CrossReference)cAttributeAssignment_6.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cAttributeAttributeCrossReference_6_0.eContents().get(1);
		
		//DateSelectionField:
		//	"date-selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"date-selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"date-selection-field"
		public Keyword getDateSelectionFieldKeyword_0() { return cDateSelectionFieldKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_6() { return cAttributeAssignment_6; }

		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_6_0() { return cAttributeAttributeCrossReference_6_0; }

		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_6_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_6_0_1; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cAttributeAttributeCrossReference_6_0 = (CrossReference)cAttributeAssignment_6.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cAttributeAttributeCrossReference_6_0.eContents().get(1);
		
		//Column:
		//	"column" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"column" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"column"
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_6() { return cAttributeAssignment_6; }

		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_6_0() { return cAttributeAttributeCrossReference_6_0; }

		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_6_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_6_0_1; }
	}

	public class SelectionFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectionFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cAttributeAttributeCrossReference_6_0 = (CrossReference)cAttributeAssignment_6.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cAttributeAttributeCrossReference_6_0.eContents().get(1);
		
		//SelectionField:
		//	"selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"selection-field"
		public Keyword getSelectionFieldKeyword_0() { return cSelectionFieldKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_6() { return cAttributeAssignment_6; }

		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_6_0() { return cAttributeAttributeCrossReference_6_0; }

		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_6_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_6_0_1; }
	}

	public class TextAreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextArea");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextAreaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cAttributeAttributeCrossReference_6_0 = (CrossReference)cAttributeAssignment_6.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cAttributeAttributeCrossReference_6_0.eContents().get(1);
		
		//TextArea:
		//	"text-area" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"text-area" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"text-area"
		public Keyword getTextAreaKeyword_0() { return cTextAreaKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_6() { return cAttributeAssignment_6; }

		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_6_0() { return cAttributeAttributeCrossReference_6_0; }

		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_6_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_6_0_1; }
	}

	public class TextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFormatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFormatAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFormatSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cFormatAssignment_5_1.eContents().get(0);
		private final Keyword cHandlesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAttributeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cAttributeAttributeCrossReference_7_0 = (CrossReference)cAttributeAssignment_7.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cAttributeAttributeCrossReference_7_0.eContents().get(1);
		
		//TextField:
		//	"text-field" elementID=ID "\"" label=STRING "\"" ("format" format=STRING)? "handles"
		//	attribute=[Attribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"text-field" elementID=ID "\"" label=STRING "\"" ("format" format=STRING)? "handles" attribute=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"text-field"
		public Keyword getTextFieldKeyword_0() { return cTextFieldKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//("format" format=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"format"
		public Keyword getFormatKeyword_5_0() { return cFormatKeyword_5_0; }

		//format=STRING
		public Assignment getFormatAssignment_5_1() { return cFormatAssignment_5_1; }

		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_5_1_0() { return cFormatSTRINGTerminalRuleCall_5_1_0; }

		//"handles"
		public Keyword getHandlesKeyword_6() { return cHandlesKeyword_6; }

		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_7() { return cAttributeAssignment_7; }

		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_7_0() { return cAttributeAttributeCrossReference_7_0; }

		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_7_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_7_0_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class CompositeConditionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeConditionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAnd0Keyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOr1Keyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CompositeConditionType:
		//	And="0" | Or="1";
		public EnumRule getRule() { return rule; }

		//And="0" | Or="1"
		public Alternatives getAlternatives() { return cAlternatives; }

		//And="0"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"0"
		public Keyword getAnd0Keyword_0_0() { return cAnd0Keyword_0_0; }

		//Or="1"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"1"
		public Keyword getOr1Keyword_1_0() { return cOr1Keyword_1_0; }
	}

	public class ConditionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHideEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHide0Keyword_0_0 = (Keyword)cHideEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cShowEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cShow1Keyword_1_0 = (Keyword)cShowEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEnableEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEnable2Keyword_2_0 = (Keyword)cEnableEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDisableEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDisable3Keyword_3_0 = (Keyword)cDisableEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNone4Keyword_4_0 = (Keyword)cNoneEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ConditionType:
		//	Hide="0" | Show="1" | Enable="2" | Disable="3" | None="4";
		public EnumRule getRule() { return rule; }

		//Hide="0" | Show="1" | Enable="2" | Disable="3" | None="4"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Hide="0"
		public EnumLiteralDeclaration getHideEnumLiteralDeclaration_0() { return cHideEnumLiteralDeclaration_0; }

		//"0"
		public Keyword getHide0Keyword_0_0() { return cHide0Keyword_0_0; }

		//Show="1"
		public EnumLiteralDeclaration getShowEnumLiteralDeclaration_1() { return cShowEnumLiteralDeclaration_1; }

		//"1"
		public Keyword getShow1Keyword_1_0() { return cShow1Keyword_1_0; }

		//Enable="2"
		public EnumLiteralDeclaration getEnableEnumLiteralDeclaration_2() { return cEnableEnumLiteralDeclaration_2; }

		//"2"
		public Keyword getEnable2Keyword_2_0() { return cEnable2Keyword_2_0; }

		//Disable="3"
		public EnumLiteralDeclaration getDisableEnumLiteralDeclaration_3() { return cDisableEnumLiteralDeclaration_3; }

		//"3"
		public Keyword getDisable3Keyword_3_0() { return cDisable3Keyword_3_0; }

		//None="4"
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_4() { return cNoneEnumLiteralDeclaration_4; }

		//"4"
		public Keyword getNone4Keyword_4_0() { return cNone4Keyword_4_0; }
	}
	
	private final FormModelElements pFormModel;
	private final FormElements pForm;
	private final PageElements pPage;
	private final ConditionElements pCondition;
	private final CompositeConditionElements pCompositeCondition;
	private final AttributeValueConditionElements pAttributeValueCondition;
	private final CompositeConditionTypeElements unknownRuleCompositeConditionType;
	private final ConditionTypeElements unknownRuleConditionType;
	private final PageElementElements pPageElement;
	private final RelationshipPageElementElements pRelationshipPageElement;
	private final TableElements pTable;
	private final ListElements pList;
	private final AttributePageElementElements pAttributePageElement;
	private final TimeSelectionFieldElements pTimeSelectionField;
	private final DateSelectionFieldElements pDateSelectionField;
	private final ColumnElements pColumn;
	private final SelectionFieldElements pSelectionField;
	private final TextAreaElements pTextArea;
	private final TextFieldElements pTextField;
	private final EIntElements pEInt;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FormGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFormModel = new FormModelElements();
		this.pForm = new FormElements();
		this.pPage = new PageElements();
		this.pCondition = new ConditionElements();
		this.pCompositeCondition = new CompositeConditionElements();
		this.pAttributeValueCondition = new AttributeValueConditionElements();
		this.unknownRuleCompositeConditionType = new CompositeConditionTypeElements();
		this.unknownRuleConditionType = new ConditionTypeElements();
		this.pPageElement = new PageElementElements();
		this.pRelationshipPageElement = new RelationshipPageElementElements();
		this.pTable = new TableElements();
		this.pList = new ListElements();
		this.pAttributePageElement = new AttributePageElementElements();
		this.pTimeSelectionField = new TimeSelectionFieldElements();
		this.pDateSelectionField = new DateSelectionFieldElements();
		this.pColumn = new ColumnElements();
		this.pSelectionField = new SelectionFieldElements();
		this.pTextArea = new TextAreaElements();
		this.pTextField = new TextFieldElements();
		this.pEInt = new EIntElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.forms.form.Form".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// implement your grammar here, starting with the root element: FormModel
	//FormModel:
	//	{FormModel} forms+=Form*;
	public FormModelElements getFormModelAccess() {
		return pFormModel;
	}
	
	public ParserRule getFormModelRule() {
		return getFormModelAccess().getRule();
	}

	//Form:
	//	welcomeForm?="welcome"? "form" name=ID "\"" title=STRING "\"" "handles" entity=[Entity|QualifiedName] "{"
	//	pages+=Page* //TODO: description missing?
	// "}";
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}

	//Page:
	//	"page" "\"" title=STRING "\"" "{" (pageElements+=PageElement ","?)* "}" condition=Condition?;
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//Condition:
	//	"with" AttributeValueCondition | "with" CompositeCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	////TODO: how to do this?
	// CompositeCondition:
	//	"composite-condition" conditionID=ID ":";
	public CompositeConditionElements getCompositeConditionAccess() {
		return pCompositeCondition;
	}
	
	public ParserRule getCompositeConditionRule() {
		return getCompositeConditionAccess().getRule();
	}

	//AttributeValueCondition:
	//	"attribute-condition" conditionID=ID ":" attribute=[Attribute|QualifiedName] "==" value=STRING "?"
	//	type=ConditionType;
	public AttributeValueConditionElements getAttributeValueConditionAccess() {
		return pAttributeValueCondition;
	}
	
	public ParserRule getAttributeValueConditionRule() {
		return getAttributeValueConditionAccess().getRule();
	}

	//enum CompositeConditionType:
	//	And="0" | Or="1";
	public CompositeConditionTypeElements getCompositeConditionTypeAccess() {
		return unknownRuleCompositeConditionType;
	}
	
	public EnumRule getCompositeConditionTypeRule() {
		return getCompositeConditionTypeAccess().getRule();
	}

	//enum ConditionType:
	//	Hide="0" | Show="1" | Enable="2" | Disable="3" | None="4";
	public ConditionTypeElements getConditionTypeAccess() {
		return unknownRuleConditionType;
	}
	
	public EnumRule getConditionTypeRule() {
		return getConditionTypeAccess().getRule();
	}

	//PageElement:
	//	AttributePageElement | RelationshipPageElement;
	public PageElementElements getPageElementAccess() {
		return pPageElement;
	}
	
	public ParserRule getPageElementRule() {
		return getPageElementAccess().getRule();
	}

	//RelationshipPageElement:
	//	List | Table;
	public RelationshipPageElementElements getRelationshipPageElementAccess() {
		return pRelationshipPageElement;
	}
	
	public ParserRule getRelationshipPageElementRule() {
		return getRelationshipPageElementAccess().getRule();
	}

	//Table:
	//	"table" elementID=ID "\"" label=STRING "\"" "handles" relationship=[Relationship|QualifiedName] "{" (columns+=Column
	//	",")* "}" "edits" editingForm=[Form|QualifiedName];
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//List:
	//	"list" elementID=ID "\"" label=STRING "\"" "handles" relationship=[Relationship|QualifiedName] "edits"
	//	editingForm=[Form|QualifiedName];
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//AttributePageElement:
	//	TextField | TextArea | SelectionField | Column | DateSelectionField | TimeSelectionField;
	public AttributePageElementElements getAttributePageElementAccess() {
		return pAttributePageElement;
	}
	
	public ParserRule getAttributePageElementRule() {
		return getAttributePageElementAccess().getRule();
	}

	//TimeSelectionField:
	//	"time-selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
	public TimeSelectionFieldElements getTimeSelectionFieldAccess() {
		return pTimeSelectionField;
	}
	
	public ParserRule getTimeSelectionFieldRule() {
		return getTimeSelectionFieldAccess().getRule();
	}

	//DateSelectionField:
	//	"date-selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
	public DateSelectionFieldElements getDateSelectionFieldAccess() {
		return pDateSelectionField;
	}
	
	public ParserRule getDateSelectionFieldRule() {
		return getDateSelectionFieldAccess().getRule();
	}

	//Column:
	//	"column" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//SelectionField:
	//	"selection-field" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
	public SelectionFieldElements getSelectionFieldAccess() {
		return pSelectionField;
	}
	
	public ParserRule getSelectionFieldRule() {
		return getSelectionFieldAccess().getRule();
	}

	//TextArea:
	//	"text-area" elementID=ID "\"" label=STRING "\"" "handles" attribute=[Attribute|QualifiedName];
	public TextAreaElements getTextAreaAccess() {
		return pTextArea;
	}
	
	public ParserRule getTextAreaRule() {
		return getTextAreaAccess().getRule();
	}

	//TextField:
	//	"text-field" elementID=ID "\"" label=STRING "\"" ("format" format=STRING)? "handles"
	//	attribute=[Attribute|QualifiedName];
	public TextFieldElements getTextFieldAccess() {
		return pTextField;
	}
	
	public ParserRule getTextFieldRule() {
		return getTextFieldAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
