// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.form.Form with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: FormModel

FormModel returns FormModel:
  {FormModel}
  (forms+=Form)+
;

Form returns Form:
  (welcomeForm?='welcome')? 'form' name=ID title=EString (description=EString)? 'handles' entity=[Entity|QualifiedName] '{'
    (pages+=Page)*
  '}' //TODO: description missing? look here: https://tuwel.tuwien.ac.at/mod/forum/discuss.php?d=53709
;

EString returns ecore::EString:
  STRING | ID;

Page returns Page:
  'page' title=STRING '{'
    (pageElements+=PageElement',')*
    pageElements+=PageElement 
  '}'  ('with' condition=Condition)?
;

Condition:
  (AttributeValueCondition) | (CompositeCondition)
;

CompositeCondition returns CompositeCondition:
  'composite-condition' conditionID=EString':'
        '('composedConditions+=AttributeValueCondition compositionType=CompositeConditionType
           composedConditions+=AttributeValueCondition')' '?' type=ConditionType
    //TODO: Just put in attributevalueCondition to make it easy. Change to Condition later.
;

AttributeValueCondition returns AttributeValueCondition:
  'attribute-condition' conditionID=EString ':' attribute=[Attribute|QualifiedName] '==' value=EString '?' type=ConditionType
;

enum CompositeConditionType returns CompositeConditionType:
  And = 'And' | Or='Or'
;

enum ConditionType returns ConditionType:
  Hide = 'Hide' | Show = 'Show' | Enable = 'Enable' | Disable = 'Disable' | None = 'None'
;

PageElement:
   (AttributePageElement | RelationshipPageElement) ('with' condition=Condition)?
;

RelationshipPageElement:
  List | Table
;

Table returns Table:
  'table' elementID=EString label=EString 'handles' relationship=[Relationship|QualifiedName] '{'
    (columns+=Column',')*
    (columns+=Column)
  '}' 'edits' editingForm=[Form|QualifiedName]
;

List returns List:
  'list' elementID=EString label=EString 'handles' relationship=[Relationship|QualifiedName] 'edits' editingForm=[Form|QualifiedName]
;

AttributePageElement:
  TextField | TextArea | SelectionField | Column | DateSelectionField | TimeSelectionField
;

TimeSelectionField returns TimeSelectionField:
  'time-selection-field' elementID=EString label=EString 'handles' attribute=[Attribute|QualifiedName]
;

DateSelectionField returns DateSelectionField:
  'date-selection-field' elementID=EString label=EString 'handles' attribute=[Attribute|QualifiedName]
  
;

Column returns Column:
  'column' elementID=EString label=EString 'handles' attribute=[Attribute|QualifiedName]
;

SelectionField returns SelectionField:
  'selection-field' elementID=EString label=EString 'handles' attribute=[Attribute|QualifiedName]
;

TextArea returns TextArea:
  'text-area' elementID=EString label=EString 'handles' attribute=[Attribute|QualifiedName]
;

TextField returns TextField:
  'text-field' elementID=EString label=EString ('format' format=EString)? 'handles' attribute=[Attribute|QualifiedName]
;

/*TextField returns TextField: 
'text-field'
(elementID=EString)?
label=EString
(format=EString)?

'handles' attribute=[Attribute|QualifiedName]
;*/

EInt returns ecore::EInt:
  '-'? INT;

QualifiedName returns ecore::EString: 
  ID (=> '.'ID)*;