// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.form.Form with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: FormModel

FormModel returns FormModel:
	{FormModel}
	(forms+=Form)*
;

Form returns Form:
	(welcomeForm?='welcome')? 'form' name=ID '"'title=STRING'"' 'handles' entity=[Entity|QualifiedName] '{'
		(pages+=Page)*
	'}' //TODO: description missing?
;

Page returns Page:
	'page' '"'title=STRING'"' '{'
		(pageElements+=PageElement (",")?)* 
	'}'  (condition=Condition)?
;

Condition:
	('with' AttributeValueCondition) | ('with' CompositeCondition)
;

CompositeCondition returns CompositeCondition:
	'composite-condition' conditionID=ID ":"
		//TODO: how to do this?
;

AttributeValueCondition returns AttributeValueCondition:
	'attribute-condition' conditionID=ID ':' attribute=[Attribute|QualifiedName] '==' value=STRING '?' type=ConditionType
;

enum CompositeConditionType returns CompositeConditionType:
	And = '0' | Or='1'
;

enum ConditionType returns ConditionType:
	Hide = '0' | Show = '1' | Enable = '2' | Disable = '3' | None = '4'
;

PageElement:
	AttributePageElement | RelationshipPageElement
;

RelationshipPageElement:
	List | Table
;

Table returns Table:
	'table' elementID=ID '"'label=STRING'"' 'handles' relationship=[Relationship|QualifiedName] '{'
		(columns+=Column ",")*
	'}' 'edits' editingForm=[Form|QualifiedName]
;

List returns List:
	'list' elementID=ID '"'label=STRING'"' 'handles' relationship=[Relationship|QualifiedName] 'edits' editingForm=[Form|QualifiedName]
;

AttributePageElement:
	TextField | TextArea | SelectionField | Column | DateSelectionField | TimeSelectionField
;

TimeSelectionField returns TimeSelectionField:
	'time-selection-field' elementID=ID '"'label=STRING'"' 'handles' attribute=[Attribute|QualifiedName]
;

DateSelectionField returns DateSelectionField:
	'date-selection-field' elementID=ID '"'label=STRING'"' 'handles' attribute=[Attribute|QualifiedName]
	
;

Column returns Column:
	'column' elementID=ID '"'label=STRING'"' 'handles' attribute=[Attribute|QualifiedName]
;

SelectionField returns SelectionField:
	'selection-field' elementID=ID '"'label=STRING'"' 'handles' attribute=[Attribute|QualifiedName]
;

TextArea returns TextArea:
	'text-area' elementID=ID '"'label=STRING'"' 'handles' attribute=[Attribute|QualifiedName]
;

TextField returns TextField:
	'text-field' elementID=ID '"'label=STRING'"' ('format' format=STRING)? 'handles' attribute=[Attribute|QualifiedName]
;

EInt returns ecore::EInt:
	'-'? INT;

QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;