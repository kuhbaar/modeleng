-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore

module Entities2Forms;
create OUT : Forms from IN : Forms;

helper def: welcomeForm : Boolean = true;
helper def: welcomeFormEntity : Forms!Entity = OclUndefined;
helper def: continue : Boolean = true;
helper def : id : Integer = 0;
helper context Integer def : inc() : Integer = self + 1; 
helper context String def : firstToUpper() : String = self.substring(1,1).toUpper() + (self.substring(2,self -> size()));

rule EntityModel2FormModel {
	from
		em : Forms!EntityModel
	to 
		fm : Forms!FormModel (
			forms <- em.entityModelElements -> select(e|e.oclIsTypeOf(Forms!Entity))
		)
}

rule Entity2Form {
	from
		e : Forms!Entity
	to
		f : Forms!Form (
			name <- e.name,
			title <- e.name,
			pages <- thisModule.Entity2InitialPage(e)
		)
		
	do{
		f.entity <- e;
		if(e = thisModule.welcomeFormEntity) {
			f.welcomeForm <- true;	
		}
		for(rel in e.features) {
			if(rel.oclIsTypeOf(Forms!Relationship)) {
				f.pages <- f.pages.append(thisModule.Relationship2Page(rel));
			}
		}
		
		
	}
}

lazy rule Entity2InitialPage {
	from
		e: Forms!Entity
	to
		pg : Forms!Page(
			title <- e.name.firstToUpper().concat(' Details')
		)
}



lazy rule Relationship2Page {
	from
		r: Forms!Relationship
	to
		pg : Forms!Page(
			title <- r.name.firstToUpper()
		)
}



entrypoint rule welcomeForm() {
	do {
		for(e in Forms!Entity.allInstances()) {
			if(thisModule.continue) {
				thisModule.welcomeForm <- true;
				for(f in Forms!Relationship.allInstances()) {
					if(f.target = e) {
						thisModule.welcomeForm <- false;	
					}
				}
				if(thisModule.welcomeForm) {
					thisModule.welcomeFormEntity <- e;
					thisModule.continue <- false;
				}
			}
		}
	}
}